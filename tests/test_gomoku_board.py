import unittest

from gomoku_board import GomokuBoard, GameRelativeResult

class TestGomokuBoard(unittest.TestCase):
    def test_simple_horizontal5(self):
        board = GomokuBoard(15)
        board, r = board.transit_next(board.xy_to_index(7,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(6,6))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(6,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(5,5))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(8,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(4,4))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(5,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(3,3))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(9,7))
        self.assertTrue(r)
        done, result = board.judge_last_action()
        self.assertTrue(done)
        self.assertEqual(result, GameRelativeResult.win_last_play_player)


    def test_simple_vertical5(self):
        board = GomokuBoard(15)
        board, r = board.transit_next(board.xy_to_index(7,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(6,6))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,8))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(5,5))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,6))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(4,4))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,9))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(3,3))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,5))
        self.assertTrue(r)
        done, result = board.judge_last_action()
        self.assertTrue(done)
        self.assertEqual(result, GameRelativeResult.win_last_play_player)

    def test_three_three_lose(self):
        board = GomokuBoard(15)
        board, r = board.transit_next(board.xy_to_index(7,7))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(6,6))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,8))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(5,5))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,6))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(4,4))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,9))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(3,3))
        self.assertTrue(r)
        board, r = board.transit_next(board.xy_to_index(7,5))
        self.assertTrue(r)
        print(board)
        done, result = board.judge_last_action()
        self.assertTrue(done)
        self.assertEqual(result, GameRelativeResult.win_last_play_player)
